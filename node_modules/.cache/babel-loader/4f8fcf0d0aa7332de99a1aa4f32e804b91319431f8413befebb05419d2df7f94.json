{"ast":null,"code":"var _jsxFileName = \"/Users/gizem/Desktop/reactproje/src/components/calendar.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Calendar, Badge } from 'antd';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskCalendar = ({\n  apiUrl,\n  userData\n}) => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const fetchDataAndFilterTasks = async () => {\n    try {\n      const response = await axios.get(apiUrl);\n      const allData = response.data.data;\n      const filteredUsers = allData.filter(item => item.UserID === userData.UserID);\n      const tasksWithSubtasks = filteredUsers.map(user => ({\n        task: user.Task,\n        date: user.Date,\n        subtasks: user.SubTask ? user.SubTask.split(',').map(subtask => subtask.trim()) : [],\n        subdate: user.SubTaskDateRanges ? user.SubTaskDateRanges.split(',').map(subtaskdate => subtaskdate.trim()) : []\n      }));\n      setTasks(tasksWithSubtasks);\n    } catch (error) {\n      console.error('Failed to fetch data', error);\n      message.error('Veriler alınamadı. Lütfen daha sonra tekrar deneyin.');\n    }\n  };\n  useEffect(() => {\n    fetchDataAndFilterTasks();\n  }, []);\n\n  // Fonksiyon: Takvimde gösterilecek badge'leri oluştur\n  const dateCellRender = value => {\n    const tasksForDate = tasks.filter(task => {\n      const taskDate = new Date(task.date);\n      return taskDate.getDate() === value.date() && taskDate.getMonth() === value.month() && taskDate.getFullYear() === value.year();\n    });\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"events\",\n      children: tasksForDate.map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(Badge, {\n          status: \"success\",\n          text: task.task\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: task.subtasks.map((subtask, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(Badge, {\n              status: \"processing\",\n              text: subtask\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 19\n            }, this)\n          }, `${task.task}-${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this)]\n      }, task.task, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Calendar, {\n      dateCellRender: dateCellRender\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskCalendar, \"bBd6yqkqV9dlkj9ENgRyXKaiXpk=\");\n_c = TaskCalendar;\nexport default Ta;\nvar _c;\n$RefreshReg$(_c, \"TaskCalendar\");","map":{"version":3,"names":["React","useState","useEffect","Calendar","Badge","axios","jsxDEV","_jsxDEV","TaskCalendar","apiUrl","userData","_s","tasks","setTasks","fetchDataAndFilterTasks","response","get","allData","data","filteredUsers","filter","item","UserID","tasksWithSubtasks","map","user","task","Task","date","Date","subtasks","SubTask","split","subtask","trim","subdate","SubTaskDateRanges","subtaskdate","error","console","message","dateCellRender","value","tasksForDate","taskDate","getDate","getMonth","month","getFullYear","year","className","children","status","text","fileName","_jsxFileName","lineNumber","columnNumber","index","_c","Ta","$RefreshReg$"],"sources":["/Users/gizem/Desktop/reactproje/src/components/calendar.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Calendar, Badge } from 'antd';\nimport axios from 'axios';\n\nconst TaskCalendar = ({apiUrl,userData}) => {\n  const [tasks, setTasks] = useState([]);\n\n \n\n  const fetchDataAndFilterTasks = async () => {\n    try {\n      const response = await axios.get(apiUrl);\n      const allData = response.data.data;\n      const filteredUsers = allData.filter(item => item.UserID === userData.UserID);\n      const tasksWithSubtasks = filteredUsers.map(user => ({\n        task: user.Task,\n        date: user.Date,\n        subtasks: user.SubTask ? user.SubTask.split(',').map(subtask => subtask.trim()) : [],\n        subdate: user.SubTaskDateRanges ? user.SubTaskDateRanges.split(',').map(subtaskdate => subtaskdate.trim()) : []\n      }));\n      setTasks(tasksWithSubtasks);\n    } catch (error) {\n      console.error('Failed to fetch data', error);\n      message.error('Veriler alınamadı. Lütfen daha sonra tekrar deneyin.');\n    }\n  };\n\n  useEffect(() => {\n    fetchDataAndFilterTasks();\n  }, []);\n\n  // Fonksiyon: Takvimde gösterilecek badge'leri oluştur\n  const dateCellRender = (value) => {\n    const tasksForDate = tasks.filter(task => {\n      const taskDate = new Date(task.date);\n      return taskDate.getDate() === value.date() && taskDate.getMonth() === value.month() && taskDate.getFullYear() === value.year();\n    });\n\n    return (\n      <ul className=\"events\">\n        {tasksForDate.map(task => (\n          <li key={task.task}>\n            <Badge status=\"success\" text={task.task} />\n            <ul>\n              {task.subtasks.map((subtask, index) => (\n                <li key={`${task.task}-${index}`}>\n                  <Badge status=\"processing\" text={subtask} />\n                </li>\n              ))}\n            </ul>\n          </li>\n        ))}\n      </ul>\n    );\n  };\n\n  return (\n    <div>\n      <Calendar dateCellRender={dateCellRender} />\n    </div>\n  );\n};\n\nexport default Ta;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}