{"ast":null,"code":"var _jsxFileName = \"/Users/gizem/Desktop/reactproje/src/components/calendar.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Badge, Calendar, message } from 'antd';\nimport axios from 'axios';\nimport moment from 'moment';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlay, faFlag } from '@fortawesome/free-solid-svg-icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst colors = ['pink', 'green', 'purple', 'blue', 'red', 'yellow', 'orange', 'cyan', 'geekblue', 'magenta', 'volcano', 'gold', 'lime'];\nconst TaskCalendar = ({\n  apiUrl,\n  userData\n}) => {\n  _s();\n  const [todos, setTodos] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get(apiUrl);\n        const allData = response.data.data;\n\n        // Filter tasks based on UserID\n        const filteredTasks = allData.filter(item => item.UserID === userData.UserID);\n\n        // Transform tasks into required format\n        const tasksWithSubtasks = filteredTasks.map(task => ({\n          task: task.Task,\n          startDate: task.Date,\n          // Assuming task date is named Date\n          endDate: task.EndDate,\n          // Assuming end date is named EndDate\n          subtasks: task.SubTask ? task.SubTask.split(',').map(subtask => subtask.trim()) : [],\n          subtaskDates: task.SubTaskDateRanges ? task.SubTaskDateRanges.split(',').map(subdate => subdate.trim()) : []\n        }));\n        console.log(t);\n        setTodos(tasksWithSubtasks);\n      } catch (error) {\n        console.error('Failed to fetch data:', error);\n        message.error(`Veriler alınamadı. Lütfen daha sonra tekrar deneyin. Hata: ${error.message}`);\n      }\n    };\n    fetchData();\n  }, [apiUrl, userData]);\n\n  // Function to group tasks by date\n  const groupTasksByDate = () => {\n    const groupedTasks = {};\n    todos.forEach(task => {\n      const startDate = moment(task.startDate);\n      const endDate = moment(task.endDate);\n      for (let date = startDate; date.isSameOrBefore(endDate, 'day'); date.add(1, 'day')) {\n        const formattedDate = date.format('YYYY-MM-DD');\n        if (!groupedTasks[formattedDate]) {\n          groupedTasks[formattedDate] = [];\n        }\n        groupedTasks[formattedDate].push(task);\n      }\n    });\n    return groupedTasks;\n  };\n\n  // Render tasks on calendar\n  const renderTasksOnCalendar = value => {\n    const groupedTasks = groupTasksByDate();\n    const date = value.format('YYYY-MM-DD');\n    const tasksForDate = groupedTasks[date] || [];\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      style: {\n        padding: 0\n      },\n      children: tasksForDate.map((task, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        style: {\n          marginBottom: 4\n        },\n        children: [/*#__PURE__*/_jsxDEV(Badge, {\n          color: colors[index % colors.length],\n          text: task.task\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this), task.subtasks.map((subtask, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginLeft: 20\n          },\n          children: /*#__PURE__*/_jsxDEV(Badge, {\n            color: colors[index % colors.length],\n            text: subtask\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 17\n          }, this)\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 15\n        }, this)), task.subtaskDates.map((subdate, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginLeft: 20\n          },\n          children: /*#__PURE__*/_jsxDEV(Badge, {\n            color: colors[index % colors.length],\n            text: subdate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 17\n          }, this)\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 15\n        }, this)), moment(task.startDate).isSame(moment(date), 'day') && /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            marginLeft: 8,\n            color: 'rgba(0, 0, 0, 0.45)'\n          },\n          children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faPlay\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 15\n        }, this), moment(task.endDate).isSame(moment(date), 'day') && /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            marginLeft: 8,\n            color: 'rgba(0, 0, 0, 0.45)'\n          },\n          children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faFlag\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Calendar, {\n      dateCellRender: renderTasksOnCalendar\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskCalendar, \"4w2FR3x+JAhc2MKl4V8naiLXs70=\");\n_c = TaskCalendar;\nexport default TaskCalendar;\nvar _c;\n$RefreshReg$(_c, \"TaskCalendar\");","map":{"version":3,"names":["React","useEffect","useState","Badge","Calendar","message","axios","moment","FontAwesomeIcon","faPlay","faFlag","jsxDEV","_jsxDEV","colors","TaskCalendar","apiUrl","userData","_s","todos","setTodos","fetchData","response","get","allData","data","filteredTasks","filter","item","UserID","tasksWithSubtasks","map","task","Task","startDate","Date","endDate","EndDate","subtasks","SubTask","split","subtask","trim","subtaskDates","SubTaskDateRanges","subdate","console","log","t","error","groupTasksByDate","groupedTasks","forEach","date","isSameOrBefore","add","formattedDate","format","push","renderTasksOnCalendar","value","tasksForDate","style","padding","children","index","marginBottom","color","length","text","fileName","_jsxFileName","lineNumber","columnNumber","idx","marginLeft","isSame","icon","dateCellRender","_c","$RefreshReg$"],"sources":["/Users/gizem/Desktop/reactproje/src/components/calendar.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Badge, Calendar, message } from 'antd';\nimport axios from 'axios';\nimport moment from 'moment';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlay, faFlag } from '@fortawesome/free-solid-svg-icons';\n\nconst colors = [\n  'pink','green', 'purple', 'blue', 'red', 'yellow', 'orange', 'cyan', 'geekblue', 'magenta', 'volcano', 'gold', 'lime',\n];\n\nconst TaskCalendar = ({ apiUrl, userData }) => {\n  const [todos, setTodos] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get(apiUrl);\n        const allData = response.data.data;\n\n        // Filter tasks based on UserID\n        const filteredTasks = allData.filter(item => item.UserID === userData.UserID);\n\n        // Transform tasks into required format\n        const tasksWithSubtasks = filteredTasks.map(task => ({\n          task: task.Task,\n          startDate: task.Date, // Assuming task date is named Date\n          endDate: task.EndDate, // Assuming end date is named EndDate\n          subtasks: task.SubTask ? task.SubTask.split(',').map(subtask => subtask.trim()) : [],\n          subtaskDates: task.SubTaskDateRanges ? task.SubTaskDateRanges.split(',').map(subdate => subdate.trim()) : []\n        }));\n        console.log(t)\n        setTodos(tasksWithSubtasks);\n      } catch (error) {\n        console.error('Failed to fetch data:', error);\n        message.error(`Veriler alınamadı. Lütfen daha sonra tekrar deneyin. Hata: ${error.message}`);\n      }\n    };\n\n    fetchData();\n  }, [apiUrl, userData]);\n\n  // Function to group tasks by date\n  const groupTasksByDate = () => {\n    const groupedTasks = {};\n    todos.forEach(task => {\n      const startDate = moment(task.startDate);\n      const endDate = moment(task.endDate);\n\n      for (let date = startDate; date.isSameOrBefore(endDate, 'day'); date.add(1, 'day')) {\n        const formattedDate = date.format('YYYY-MM-DD');\n        if (!groupedTasks[formattedDate]) {\n          groupedTasks[formattedDate] = [];\n        }\n        groupedTasks[formattedDate].push(task);\n      }\n    });\n    return groupedTasks;\n  };\n\n  // Render tasks on calendar\n  const renderTasksOnCalendar = value => {\n    const groupedTasks = groupTasksByDate();\n\n    const date = value.format('YYYY-MM-DD');\n    const tasksForDate = groupedTasks[date] || [];\n\n    return (\n      <ul style={{ padding: 0 }}>\n        {tasksForDate.map((task, index) => (\n          <li key={index} style={{ marginBottom: 4 }}>\n            <Badge color={colors[index % colors.length]} text={task.task} />\n            {task.subtasks.map((subtask, idx) => (\n              <div key={idx} style={{ marginLeft: 20 }}>\n                <Badge color={colors[index % colors.length]} text={subtask} />\n              </div>\n            ))}\n            {task.subtaskDates.map((subdate, idx) => (\n              <div key={idx} style={{ marginLeft: 20 }}>\n                <Badge color={colors[index % colors.length]} text={subdate} />\n              </div>\n            ))}\n            {moment(task.startDate).isSame(moment(date), 'day') && (\n              <span style={{ marginLeft: 8, color: 'rgba(0, 0, 0, 0.45)' }}>\n                <FontAwesomeIcon icon={faPlay} />\n              </span>\n            )}\n            {moment(task.endDate).isSame(moment(date), 'day') && (\n              <span style={{ marginLeft: 8, color: 'rgba(0, 0, 0, 0.45)' }}>\n                <FontAwesomeIcon icon={faFlag} />\n              </span>\n            )}\n          </li>\n        ))}\n      </ul>\n    );\n  };\n\n  return (\n    <div>\n      <Calendar dateCellRender={renderTasksOnCalendar} />\n    </div>\n  );\n};\n\nexport default TaskCalendar;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}