{"ast":null,"code":"var _jsxFileName = \"/Users/gizem/Desktop/reactproje/src/components/calendar.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Badge, Calendar, message } from 'antd';\nimport axios from 'axios';\nimport moment from 'moment';\nimport { CaretLeftOutlined, CaretRightOutlined } from '@ant-design/icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlay, faFlag } from '@fortawesome/free-solid-svg-icons'; // Font Awesome'den\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst colors = ['pink', 'green', 'purple', 'blue', 'red', 'yellow', 'orange', 'cyan', 'geekblue', 'magenta', 'volcano', 'gold', 'lime'];\nconst TaskCalendar = ({\n  apiUrl,\n  userData\n}) => {\n  _s();\n  const [todos, setTodos] = useState([]);\n  const fetchDataAndFilterTasks = async () => {\n    try {\n      const response = await axios.get(apiUrl);\n      const allData = response.data.data;\n      console.log('Tüm veriler:', allData); // Log all data to console\n\n      // Filter tasks based on UserID and transform tasks into a usable format\n      const filteredUsers = allData.filter(item => item.UserID === userData.UserID);\n      const filteredTasks = allData.filter(item => item.UserID === userData.UserID);\n      // Transform tasks into required format\n      const tasksWithSubtasks = filteredTasks.map(task => ({\n        task: task.Task,\n        date: task.Date,\n        subtasks: task.SubTask ? task.SubTask.split(',').map(subtask => subtask.trim()) : [],\n        subdates: task.SubTaskDateRanges ? task.SubTaskDateRanges.split(',').map(subdate => subdate.trim()) : []\n      }));\n      // Set state with transformed tasks\n      setTasks(tasksWithSubtasks);\n      setTodos(tasksWithDates);\n    } catch (error) {\n      console.error('Failed to fetch data:', error);\n      message.error(`Veriler alınamadı. Lütfen daha sonra tekrar deneyin. Hata: ${error.message}`);\n    }\n  };\n  useEffect(() => {\n    fetchDataAndFilterTasks();\n  }, []);\n  useEffect(() => {\n    console.log('Filtrelenmiş görevler:', todos);\n  }, [todos]);\n\n  // Function to group tasks by date range\n  const groupTasksByDate = () => {\n    const groupedTasks = {};\n    todos.forEach(task => {\n      const startDate = moment(task.startDate);\n      const endDate = moment(task.endDate);\n      for (let date = startDate; date.isSameOrBefore(endDate, 'day'); date.add(1, 'day')) {\n        const formattedDate = date.format('YYYY-MM-DD');\n        if (!groupedTasks[formattedDate]) {\n          groupedTasks[formattedDate] = [];\n        }\n        groupedTasks[formattedDate].push(task);\n      }\n    });\n    return groupedTasks;\n  };\n\n  // Render tasks on calendar\n  const renderTasksOnCalendar = value => {\n    const groupedTasks = groupTasksByDate();\n    const date = value.format('YYYY-MM-DD');\n    const tasksForDate = groupedTasks[date] || [];\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      style: {\n        padding: 0\n      },\n      children: tasksForDate.map((task, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        style: {\n          marginBottom: 4\n        },\n        children: [/*#__PURE__*/_jsxDEV(Badge, {\n          color: colors[index % colors.length],\n          text: task.task\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this), moment(task.startDate).isSame(moment(date), 'day') && /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            marginLeft: 8,\n            color: 'rgba(0, 0, 0, 0.45)'\n          },\n          children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faPlay\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 15\n        }, this), moment(task.endDate).isSame(moment(date), 'day') && /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            marginLeft: 8,\n            color: 'rgba(0, 0, 0, 0.45)'\n          },\n          children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faFlag\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 16\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Calendar, {\n      dateCellRender: renderTasksOnCalendar\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskCalendar, \"JPZTns5sUK6f8sNf0ff2EvpSbn0=\");\n_c = TaskCalendar;\nexport default TaskCalendar;\nvar _c;\n$RefreshReg$(_c, \"TaskCalendar\");","map":{"version":3,"names":["React","useEffect","useState","Badge","Calendar","message","axios","moment","CaretLeftOutlined","CaretRightOutlined","FontAwesomeIcon","faPlay","faFlag","jsxDEV","_jsxDEV","colors","TaskCalendar","apiUrl","userData","_s","todos","setTodos","fetchDataAndFilterTasks","response","get","allData","data","console","log","filteredUsers","filter","item","UserID","filteredTasks","tasksWithSubtasks","map","task","Task","date","Date","subtasks","SubTask","split","subtask","trim","subdates","SubTaskDateRanges","subdate","setTasks","tasksWithDates","error","groupTasksByDate","groupedTasks","forEach","startDate","endDate","isSameOrBefore","add","formattedDate","format","push","renderTasksOnCalendar","value","tasksForDate","style","padding","children","index","marginBottom","color","length","text","fileName","_jsxFileName","lineNumber","columnNumber","isSame","marginLeft","icon","dateCellRender","_c","$RefreshReg$"],"sources":["/Users/gizem/Desktop/reactproje/src/components/calendar.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Badge, Calendar, message } from 'antd';\nimport axios from 'axios';\nimport moment from 'moment';\nimport { CaretLeftOutlined, CaretRightOutlined } from '@ant-design/icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlay,faFlag } from '@fortawesome/free-solid-svg-icons'; // Font Awesome'den\nconst colors = [\n  'pink','green', 'purple', 'blue', 'red', 'yellow', 'orange', 'cyan', 'geekblue', 'magenta', 'volcano', 'gold', 'lime',\n];\n\nconst TaskCalendar = ({ apiUrl, userData }) => {\n  const [todos, setTodos] = useState([]);\n\n  const fetchDataAndFilterTasks = async () => {\n    try {\n      const response = await axios.get(apiUrl);\n      const allData = response.data.data;\n\n      console.log('Tüm veriler:', allData); // Log all data to console\n\n      // Filter tasks based on UserID and transform tasks into a usable format\n      const filteredUsers = allData.filter(item => item.UserID === userData.UserID);\n      const filteredTasks = allData.filter(item => item.UserID === userData.UserID);\n        // Transform tasks into required format\n        const tasksWithSubtasks = filteredTasks.map(task => ({\n          task: task.Task,\n          date: task.Date,\n          subtasks: task.SubTask ? task.SubTask.split(',').map(subtask => subtask.trim()) : [],\n          subdates: task.SubTaskDateRanges ? task.SubTaskDateRanges.split(',').map(subdate => subdate.trim()) : []\n        }));\n        // Set state with transformed tasks\n        setTasks(tasksWithSubtasks);\n\n      setTodos(tasksWithDates);\n\n    } catch (error) {\n      console.error('Failed to fetch data:', error);\n      message.error(`Veriler alınamadı. Lütfen daha sonra tekrar deneyin. Hata: ${error.message}`);\n    }\n  };\n\n  useEffect(() => {\n    fetchDataAndFilterTasks();\n  }, []);\n\n  useEffect(() => {\n    console.log('Filtrelenmiş görevler:', todos);\n  }, [todos]);\n\n  // Function to group tasks by date range\n  const groupTasksByDate = () => {\n    const groupedTasks = {};\n    todos.forEach(task => {\n      const startDate = moment(task.startDate);\n      const endDate = moment(task.endDate);\n\n      for (let date = startDate; date.isSameOrBefore(endDate, 'day'); date.add(1, 'day')) {\n        const formattedDate = date.format('YYYY-MM-DD');\n        if (!groupedTasks[formattedDate]) {\n          groupedTasks[formattedDate] = [];\n        }\n        groupedTasks[formattedDate].push(task);\n      }\n    });\n    return groupedTasks;\n  };\n\n  // Render tasks on calendar\n  const renderTasksOnCalendar = value => {\n    const groupedTasks = groupTasksByDate();\n\n    const date = value.format('YYYY-MM-DD');\n    const tasksForDate = groupedTasks[date] || [];\n\n    return (\n      <ul style={{ padding: 0 }}>\n        {tasksForDate.map((task, index) => (\n          <li key={index} style={{ marginBottom: 4 }}>\n            <Badge color={colors[index % colors.length]} text={task.task} />\n            {moment(task.startDate).isSame(moment(date), 'day') && (\n              <span style={{ marginLeft: 8, color: 'rgba(0, 0, 0, 0.45)' }}>\n                <FontAwesomeIcon icon={faPlay} />\n              </span>\n            )}\n            {moment(task.endDate).isSame(moment(date), 'day') && (\n              <span style={{ marginLeft: 8, color: 'rgba(0, 0, 0, 0.45)' }}>\n               < FontAwesomeIcon icon={faFlag} />\n              </span>\n            )}\n          </li>\n        ))}\n      </ul>\n    );\n  };\n\n  return (\n    <div>\n      <Calendar\n        dateCellRender={renderTasksOnCalendar}\n      />\n    </div>\n  );\n};\n\nexport default TaskCalendar;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}