{"ast":null,"code":"var _jsxFileName = \"/Users/gizem/Desktop/reactproje/src/components/calendar.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Badge, Calendar, message } from 'antd';\nimport axios from 'axios';\nimport moment from 'moment';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlay, faFlag } from '@fortawesome/free-solid-svg-icons';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst colors = ['pink', 'green', 'purple', 'blue', 'red', 'yellow', 'orange', 'cyan', 'geekblue', 'magenta', 'volcano', 'gold', 'lime'];\nconst TaskCalendar = ({\n  apiUrl,\n  userData\n}) => {\n  _s();\n  const [todos, setTodos] = useState([]);\n  const fetchDataAndFilterTasks = async () => {\n    try {\n      const response = await axios.get(apiUrl);\n      const allData = response.data.data;\n      const filteredUsers = allData.filter(item => item.UserID === userData.UserID);\n      const tasksWithDates = filteredUsers.map(user => {\n        const [startDate, endDate] = user.Date.split(' to ').map(date => moment(date, 'DD-MM-YYYY').format('YYYY-MM-DD'));\n        const subtasks = user.SubTask ? user.SubTask.split(',').map(subtask => ({\n          name: subtask.trim(),\n          date: moment(user.SubTaskDateRanges.split(',')[0].trim(), 'DD-MM-YYYY').format('YYYY-MM-DD')\n        })) : [];\n        return {\n          task: user.Task,\n          startDate,\n          endDate,\n          subtasks\n        };\n      });\n      setTodos(tasksWithDates);\n    } catch (error) {\n      console.error('Failed to fetch data:', error);\n      message.error(`Veriler alınamadı. Lütfen daha sonra tekrar deneyin. Hata: ${error.message}`);\n    }\n  };\n  useEffect(() => {\n    fetchDataAndFilterTasks();\n  }, []);\n\n  // Function to group tasks by date range\n  const groupTasksByDate = () => {\n    const groupedTasks = {};\n    todos.forEach(task => {\n      const startDate = moment(task.startDate);\n      const endDate = moment(task.endDate);\n      for (let date = startDate; date.isSameOrBefore(endDate, 'day'); date.add(1, 'day')) {\n        const formattedDate = date.format('YYYY-MM-DD');\n        if (!groupedTasks[formattedDate]) {\n          groupedTasks[formattedDate] = [];\n        }\n        groupedTasks[formattedDate].push(task);\n      }\n\n      // Add subtasks to groupedTasks based on their dates\n      task.subtasks.forEach(subtask => {\n        const subtaskDate = moment(subtask.date);\n        const formattedSubtaskDate = subtaskDate.format('YYYY-MM-DD');\n        if (!groupedTasks[formattedSubtaskDate]) {\n          groupedTasks[formattedSubtaskDate] = [];\n        }\n        groupedTasks[formattedSubtaskDate].push({\n          task: subtask.name,\n          startDate: subtask.date,\n          endDate: subtask.date,\n          isSubtask: true\n        });\n      });\n    });\n    return groupedTasks;\n  };\n\n  // Render tasks and subtasks on calendar for a specific date\n  const renderTasksOnCalendar = value => {\n    const groupedTasks = groupTasksByDate();\n    const date = value.format('YYYY-MM-DD');\n    const tasksForDate = groupedTasks[date] || [];\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      style: {\n        padding: 0\n      },\n      children: tasksForDate.map((task, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        style: {\n          marginBottom: 8\n        },\n        children: task.isSubtask ? /*#__PURE__*/_jsxDEV(Badge, {\n          color: colors[index % colors.length],\n          text: task.task\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Badge, {\n            color: colors[index % colors.length],\n            text: task.task\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 17\n          }, this), moment(task.startDate).isSame(moment(date), 'day') && /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              marginLeft: 8,\n              color: 'rgba(0, 0, 0, 0.45)'\n            },\n            children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: faPlay\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 19\n          }, this), moment(task.endDate).isSame(moment(date), 'day') && /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              marginLeft: 8,\n              color: 'rgba(0, 0, 0, 0.45)'\n            },\n            children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: faFlag\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Calendar, {\n      dateCellRender: renderTasksOnCalendar\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskCalendar, \"4w2FR3x+JAhc2MKl4V8naiLXs70=\");\n_c = TaskCalendar;\nexport default TaskCalendar;\nvar _c;\n$RefreshReg$(_c, \"TaskCalendar\");","map":{"version":3,"names":["React","useEffect","useState","Badge","Calendar","message","axios","moment","FontAwesomeIcon","faPlay","faFlag","jsxDEV","_jsxDEV","Fragment","_Fragment","colors","TaskCalendar","apiUrl","userData","_s","todos","setTodos","fetchDataAndFilterTasks","response","get","allData","data","filteredUsers","filter","item","UserID","tasksWithDates","map","user","startDate","endDate","Date","split","date","format","subtasks","SubTask","subtask","name","trim","SubTaskDateRanges","task","Task","error","console","groupTasksByDate","groupedTasks","forEach","isSameOrBefore","add","formattedDate","push","subtaskDate","formattedSubtaskDate","isSubtask","renderTasksOnCalendar","value","tasksForDate","style","padding","children","index","marginBottom","color","length","text","fileName","_jsxFileName","lineNumber","columnNumber","isSame","marginLeft","icon","dateCellRender","_c","$RefreshReg$"],"sources":["/Users/gizem/Desktop/reactproje/src/components/calendar.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Badge, Calendar, message } from 'antd';\nimport axios from 'axios';\nimport moment from 'moment';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlay, faFlag } from '@fortawesome/free-solid-svg-icons';\n\nconst colors = ['pink', 'green', 'purple', 'blue', 'red', 'yellow', 'orange', 'cyan', 'geekblue', 'magenta', 'volcano', 'gold', 'lime'];\n\nconst TaskCalendar = ({ apiUrl, userData }) => {\n  const [todos, setTodos] = useState([]);\n\n  const fetchDataAndFilterTasks = async () => {\n    try {\n      const response = await axios.get(apiUrl);\n      const allData = response.data.data;\n\n      const filteredUsers = allData.filter(item => item.UserID === userData.UserID);\n      const tasksWithDates = filteredUsers.map(user => {\n        const [startDate, endDate] = user.Date.split(' to ').map(date => moment(date, 'DD-MM-YYYY').format('YYYY-MM-DD'));\n        const subtasks = user.SubTask ? user.SubTask.split(',').map(subtask => ({\n          name: subtask.trim(),\n          date: moment(user.SubTaskDateRanges.split(',')[0].trim(), 'DD-MM-YYYY').format('YYYY-MM-DD')\n        })) : [];\n        return {\n          task: user.Task,\n          startDate,\n          endDate,\n          subtasks\n        };\n      });\n\n      setTodos(tasksWithDates);\n\n    } catch (error) {\n      console.error('Failed to fetch data:', error);\n      message.error(`Veriler alınamadı. Lütfen daha sonra tekrar deneyin. Hata: ${error.message}`);\n    }\n  };\n\n  useEffect(() => {\n    fetchDataAndFilterTasks();\n  }, []);\n\n  // Function to group tasks by date range\n  const groupTasksByDate = () => {\n    const groupedTasks = {};\n    todos.forEach(task => {\n      const startDate = moment(task.startDate);\n      const endDate = moment(task.endDate);\n\n      for (let date = startDate; date.isSameOrBefore(endDate, 'day'); date.add(1, 'day')) {\n        const formattedDate = date.format('YYYY-MM-DD');\n        if (!groupedTasks[formattedDate]) {\n          groupedTasks[formattedDate] = [];\n        }\n        groupedTasks[formattedDate].push(task);\n      }\n\n      // Add subtasks to groupedTasks based on their dates\n      task.subtasks.forEach(subtask => {\n        const subtaskDate = moment(subtask.date);\n        const formattedSubtaskDate = subtaskDate.format('YYYY-MM-DD');\n        if (!groupedTasks[formattedSubtaskDate]) {\n          groupedTasks[formattedSubtaskDate] = [];\n        }\n        groupedTasks[formattedSubtaskDate].push({\n          task: subtask.name,\n          startDate: subtask.date,\n          endDate: subtask.date,\n          isSubtask: true\n        });\n      });\n    });\n    return groupedTasks;\n  };\n\n  // Render tasks and subtasks on calendar for a specific date\n  const renderTasksOnCalendar = value => {\n    const groupedTasks = groupTasksByDate();\n    const date = value.format('YYYY-MM-DD');\n    const tasksForDate = groupedTasks[date] || [];\n\n    return (\n      <ul style={{ padding: 0 }}>\n        {tasksForDate.map((task, index) => (\n          <li key={index} style={{ marginBottom: 8 }}>\n            {task.isSubtask ? (\n              <Badge color={colors[index % colors.length]} text={task.task} />\n            ) : (\n              <>\n                <Badge color={colors[index % colors.length]} text={task.task} />\n                {moment(task.startDate).isSame(moment(date), 'day') && (\n                  <span style={{ marginLeft: 8, color: 'rgba(0, 0, 0, 0.45)' }}>\n                    <FontAwesomeIcon icon={faPlay} />\n                  </span>\n                )}\n                {moment(task.endDate).isSame(moment(date), 'day') && (\n                  <span style={{ marginLeft: 8, color: 'rgba(0, 0, 0, 0.45)' }}>\n                    <FontAwesomeIcon icon={faFlag} />\n                  </span>\n                )}\n              </>\n            )}\n          </li>\n        ))}\n      </ul>\n    );\n  };\n\n  return (\n    <div>\n      <Calendar\n        dateCellRender={renderTasksOnCalendar}\n      />\n    </div>\n  );\n};\n\nexport default TaskCalendar;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}