{"ast":null,"code":"var _jsxFileName = \"/Users/gizem/Desktop/reactproje/src/components/task.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Button } from 'antd';\nimport TaskData from '../services/taskdata';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Task = ({\n  userData\n}) => {\n  _s();\n  const [filteredTasks, setFilteredTasks] = useState([]);\n\n  // Veriyi yeniden çekme ve filtreleme fonksiyonu\n  const fetchDataAndFilterTasks = async () => {\n    const {\n      filteredTasks: updatedTasks\n    } = await TaskData(userData);\n    setFilteredTasks(updatedTasks);\n  };\n\n  // İlk render'da ve userData.UserID değiştiğinde çalışacak\n  useEffect(() => {\n    fetchDataAndFilterTasks();\n  }, [userData.UserID]);\n\n  // Belirli aralıklarla veriyi yenileme örneği\n  useEffect(() => {\n    const interval = setInterval(() => {\n      fetchDataAndFilterTasks();\n    }, 60000); // 1 dakikada bir yenileme yapılabilir, isteğe göre ayarlanabilir\n\n    return () => clearInterval(interval);\n  }, []); // Boş dependency array, sadece ilk render'da çalışmasını sağlar\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"G\\xF6revleriniz:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), filteredTasks.length > 0 ? filteredTasks.map((task, index) => /*#__PURE__*/_jsxDEV(Button, {\n      style: {\n        marginBottom: '10px'\n      },\n      block: true,\n      children: task\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 21\n    }, this)) : \"Yükleniyor...\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n};\n_s(Task, \"fOF794KmGJpDiG5hYZgfTMq8cyY=\");\n_c = Task;\nexport default Task;\nvar _c;\n$RefreshReg$(_c, \"Task\");","map":{"version":3,"names":["React","useState","useEffect","Button","TaskData","jsxDEV","_jsxDEV","Task","userData","_s","filteredTasks","setFilteredTasks","fetchDataAndFilterTasks","updatedTasks","UserID","interval","setInterval","clearInterval","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","task","index","marginBottom","block","_c","$RefreshReg$"],"sources":["/Users/gizem/Desktop/reactproje/src/components/task.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Button } from 'antd';\nimport TaskData from '../services/taskdata';\n\nconst Task = ({ userData }) => {\n    const [filteredTasks, setFilteredTasks] = useState([]);\n    \n    // Veriyi yeniden çekme ve filtreleme fonksiyonu\n    const fetchDataAndFilterTasks = async () => {\n        const { filteredTasks: updatedTasks } = await TaskData(userData);\n        setFilteredTasks(updatedTasks);\n    };\n\n    // İlk render'da ve userData.UserID değiştiğinde çalışacak\n    useEffect(() => {\n        fetchDataAndFilterTasks();\n    }, [userData.UserID]);\n\n    // Belirli aralıklarla veriyi yenileme örneği\n    useEffect(() => {\n        const interval = setInterval(() => {\n            fetchDataAndFilterTasks();\n        }, 60000); // 1 dakikada bir yenileme yapılabilir, isteğe göre ayarlanabilir\n\n        return () => clearInterval(interval);\n    }, []); // Boş dependency array, sadece ilk render'da çalışmasını sağlar\n\n    return (\n        <div style={{ padding: '20px' }}>\n            <h2>Görevleriniz:</h2>\n            {filteredTasks.length > 0 ? (\n                filteredTasks.map((task, index) => (\n                    <Button key={index} style={{ marginBottom: '10px' }} block>\n                        {task}\n                    </Button>\n                ))\n            ) : (\n                \"Yükleniyor...\"\n            )}\n        </div>\n    );\n};\n\nexport default Task;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,MAAM,QAAQ,MAAM;AAC7B,OAAOC,QAAQ,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,IAAI,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC3B,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;;EAEtD;EACA,MAAMW,uBAAuB,GAAG,MAAAA,CAAA,KAAY;IACxC,MAAM;MAAEF,aAAa,EAAEG;IAAa,CAAC,GAAG,MAAMT,QAAQ,CAACI,QAAQ,CAAC;IAChEG,gBAAgB,CAACE,YAAY,CAAC;EAClC,CAAC;;EAED;EACAX,SAAS,CAAC,MAAM;IACZU,uBAAuB,CAAC,CAAC;EAC7B,CAAC,EAAE,CAACJ,QAAQ,CAACM,MAAM,CAAC,CAAC;;EAErB;EACAZ,SAAS,CAAC,MAAM;IACZ,MAAMa,QAAQ,GAAGC,WAAW,CAAC,MAAM;MAC/BJ,uBAAuB,CAAC,CAAC;IAC7B,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;;IAEX,OAAO,MAAMK,aAAa,CAACF,QAAQ,CAAC;EACxC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACIT,OAAA;IAAKY,KAAK,EAAE;MAAEC,OAAO,EAAE;IAAO,CAAE;IAAAC,QAAA,gBAC5Bd,OAAA;MAAAc,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACrBd,aAAa,CAACe,MAAM,GAAG,CAAC,GACrBf,aAAa,CAACgB,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBAC1BtB,OAAA,CAACH,MAAM;MAAae,KAAK,EAAE;QAAEW,YAAY,EAAE;MAAO,CAAE;MAACC,KAAK;MAAAV,QAAA,EACrDO;IAAI,GADIC,KAAK;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEV,CACX,CAAC,GAEF,eACH;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAACf,EAAA,CArCIF,IAAI;AAAAwB,EAAA,GAAJxB,IAAI;AAuCV,eAAeA,IAAI;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}