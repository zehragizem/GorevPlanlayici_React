{"ast":null,"code":"var _jsxFileName = \"/Users/gizem/Desktop/reactproje/src/common/taskEdit.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Form, Input, Button } from 'antd';\nimport { FileAddOutlined } from '@ant-design/icons';\nimport axios from 'axios';\nimport Task from '../components/task';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskForm = ({\n  userData\n}) => {\n  _s();\n  const [name, setName] = useState('');\n  const [refreshKey, setRefreshKey] = useState(Date.now()); // Key to force Task component refresh\n  const apiUrl = 'https://v1.nocodeapi.com/gizem12345/google_sheets/JheosOqLeKiZJKFm?tabId=login';\n  const handleChange = e => {\n    setName(e.target.value);\n  };\n  const getData = async () => {\n    try {\n      const response = await axios.get(apiUrl);\n      return response.data.data;\n    } catch (error) {\n      console.error('Failed to fetch data', error);\n      return [];\n    }\n  };\n  const handleSubmit = async () => {\n    const data = [[userData.Email, userData.Password, userData.User, name, userData.UserID]];\n    try {\n      await axios.post(apiUrl, data, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log('Görev başarıyla eklendi');\n      setName(''); // Clear input field after successful submission\n      setRefreshKey(Date.now()); // Trigger Task component refresh by changing the key\n    } catch (error) {\n      console.error('Görev eklenirken hata oluştu:', error);\n    }\n  };\n\n  // Görev ekledikten sonra verileri güncellemek için useEffect kullanımı\n  useEffect(() => {\n    const updateData = async () => {\n      const newData = await getData();\n      setRefreshKey(Date.now()); // Bileşenin yeniden render edilmesi için key'i güncelle\n    };\n    updateData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Form, {\n      onFinish: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"taskInput\",\n        rules: [{\n          required: true,\n          message: 'Lütfen bir görev girin!'\n        }],\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          name: \"g\\xF6rev\",\n          placeholder: \"G\\xF6rev Ekleyin\",\n          value: name,\n          onChange: handleChange,\n          size: \"large\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          htmlType: \"submit\",\n          type: \"primary\",\n          icon: /*#__PURE__*/_jsxDEV(FileAddOutlined, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 19\n          }, this),\n          size: \"large\",\n          children: \"Ekle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Task, {\n      userData: userData\n    }, refreshKey, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskForm, \"cohsANpWr19LAxVDKZQT3EGKL4w=\");\n_c = TaskForm;\nexport default TaskForm;\nvar _c;\n$RefreshReg$(_c, \"TaskForm\");","map":{"version":3,"names":["React","useState","Form","Input","Button","FileAddOutlined","axios","Task","jsxDEV","_jsxDEV","TaskForm","userData","_s","name","setName","refreshKey","setRefreshKey","Date","now","apiUrl","handleChange","e","target","value","getData","response","get","data","error","console","handleSubmit","Email","Password","User","UserID","post","headers","log","useEffect","updateData","newData","children","onFinish","Item","rules","required","message","placeholder","onChange","size","fileName","_jsxFileName","lineNumber","columnNumber","htmlType","type","icon","_c","$RefreshReg$"],"sources":["/Users/gizem/Desktop/reactproje/src/common/taskEdit.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Form, Input, Button } from 'antd';\nimport { FileAddOutlined } from '@ant-design/icons';\nimport axios from 'axios';\nimport Task from '../components/task';\n\nconst TaskForm = ({ userData }) => {\n  const [name, setName] = useState('');\n  const [refreshKey, setRefreshKey] = useState(Date.now()); // Key to force Task component refresh\n  const apiUrl = 'https://v1.nocodeapi.com/gizem12345/google_sheets/JheosOqLeKiZJKFm?tabId=login';\n\n  const handleChange = (e) => {\n    setName(e.target.value);\n  };\n\n  const getData = async () => {\n    try {\n      const response = await axios.get(apiUrl);\n      return response.data.data;\n    } catch (error) {\n      console.error('Failed to fetch data', error);\n      return [];\n    }\n  };\n\n  const handleSubmit = async () => {\n    const data = [\n      [\n        userData.Email,\n        userData.Password,\n        userData.User,\n        name,\n        userData.UserID\n      ]\n    ];\n\n    try {\n      await axios.post(\n        apiUrl,\n        data,\n        {\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n      console.log('Görev başarıyla eklendi');\n      setName(''); // Clear input field after successful submission\n      setRefreshKey(Date.now()); // Trigger Task component refresh by changing the key\n    } catch (error) {\n      console.error('Görev eklenirken hata oluştu:', error);\n    }\n  };\n\n  // Görev ekledikten sonra verileri güncellemek için useEffect kullanımı\n  useEffect(() => {\n    const updateData = async () => {\n      const newData = await getData();\n      setRefreshKey(Date.now()); // Bileşenin yeniden render edilmesi için key'i güncelle\n    };\n\n    updateData();\n  }, []);\n\n  return (\n    <div>\n      <Form onFinish={handleSubmit}>\n        <Form.Item\n          name=\"taskInput\"\n          rules={[{ required: true, message: 'Lütfen bir görev girin!' }]}\n        >\n          <Input\n            name='görev'\n            placeholder=\"Görev Ekleyin\"\n            value={name}\n            onChange={handleChange}\n            size=\"large\"\n          />\n        </Form.Item>\n        <Form.Item>\n          <Button\n            htmlType=\"submit\"\n            type=\"primary\"\n            icon={<FileAddOutlined />}\n            size=\"large\"\n          >\n            Ekle\n          </Button>\n        </Form.Item>\n      </Form>\n      <Task key={refreshKey} userData={userData} />\n    </div>\n  );\n};\n\nexport default TaskForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}