{"ast":null,"code":"var _jsxFileName = \"/Users/gizem/Desktop/reactproje/src/services/taskwrapper.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport TaskForm from \"../components/taskform\";\nimport TaskList from \"/Users/gizem/Desktop/reactproje/src/components/tasklist.js\";\nimport { Form, Input, Button, message } from 'antd';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskWrapper = ({\n  userData\n}) => {\n  _s();\n  const [todos, setTodos] = useState([]);\n  const apiUrl = 'https://v1.nocodeapi.com/gizem0011/google_sheets/KfjSbYcGqTRHHAaH?tabId=login';\n\n  // Function to fetch and filter tasks\n  const fetchDataAndFilterTasks = async () => {\n    try {\n      const response = await axios.get(apiUrl);\n      const allData = response.data.data;\n      const filteredUsers = allData.filter(item => item.UserID === userData.UserID);\n      const tasks = filteredUsers.flatMap(user => user.Task.split(',').map(task => task.trim()));\n\n      // Set initial data from localStorage if available, otherwise from API\n      const storedTodos = localStorage.getItem('todos');\n      if (storedTodos) {\n        setTodos(JSON.parse(storedTodos));\n      } else {\n        setTodos(tasks);\n      }\n    } catch (error) {\n      console.error('Failed to fetch data', error);\n      message.error('Veriler alınamadı. Lütfen daha sonra tekrar deneyin.');\n    }\n  };\n\n  // Fetch initial data on component mount\n  useEffect(() => {\n    fetchDataAndFilterTasks();\n  }, []);\n\n  // Update localStorage whenever todos state changes\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }, [todos]);\n  const addTask = todo => {\n    setTodos([...todos, todo]);\n  };\n  const deleteTask = task => {\n    setTodos(prevTodos => prevTodos.filter(todo => todo !== task));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Get Things Done!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TaskForm, {\n      addTask: addTask,\n      userData: userData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), todos.map((todo, index) => /*#__PURE__*/_jsxDEV(TaskList, {\n      task: todo,\n      deleteTask: deleteTask\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n_s(TaskWrapper, \"JPZTns5sUK6f8sNf0ff2EvpSbn0=\");\n_c = TaskWrapper;\nexport default TaskWrapper;\nvar _c;\n$RefreshReg$(_c, \"TaskWrapper\");","map":{"version":3,"names":["React","useState","useEffect","TaskForm","TaskList","Form","Input","Button","message","axios","jsxDEV","_jsxDEV","TaskWrapper","userData","_s","todos","setTodos","apiUrl","fetchDataAndFilterTasks","response","get","allData","data","filteredUsers","filter","item","UserID","tasks","flatMap","user","Task","split","map","task","trim","storedTodos","localStorage","getItem","JSON","parse","error","console","setItem","stringify","addTask","todo","deleteTask","prevTodos","children","fileName","_jsxFileName","lineNumber","columnNumber","index","_c","$RefreshReg$"],"sources":["/Users/gizem/Desktop/reactproje/src/services/taskwrapper.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport TaskForm from \"../components/taskform\";\nimport TaskList from \"/Users/gizem/Desktop/reactproje/src/components/tasklist.js\";\nimport { Form, Input, Button, message } from 'antd';\nimport axios from 'axios';\n\nconst TaskWrapper = ({ userData }) => {\n    const [todos, setTodos] = useState([]);\n\n    const apiUrl = 'https://v1.nocodeapi.com/gizem0011/google_sheets/KfjSbYcGqTRHHAaH?tabId=login';\n\n    // Function to fetch and filter tasks\n    const fetchDataAndFilterTasks = async () => {\n        try {\n            const response = await axios.get(apiUrl);\n            const allData = response.data.data;\n\n            const filteredUsers = allData.filter(item => item.UserID === userData.UserID);\n            const tasks = filteredUsers.flatMap(user => user.Task.split(',').map(task => task.trim()));\n\n            // Set initial data from localStorage if available, otherwise from API\n            const storedTodos = localStorage.getItem('todos');\n            if (storedTodos) {\n                setTodos(JSON.parse(storedTodos));\n            } else {\n                setTodos(tasks);\n            }\n\n        } catch (error) {\n            console.error('Failed to fetch data', error);\n            message.error('Veriler alınamadı. Lütfen daha sonra tekrar deneyin.');\n        }\n    };\n\n    // Fetch initial data on component mount\n    useEffect(() => {\n        fetchDataAndFilterTasks();\n    }, []);\n\n    // Update localStorage whenever todos state changes\n    useEffect(() => {\n        localStorage.setItem('todos', JSON.stringify(todos));\n    }, [todos]);\n\n    const addTask = (todo) => {\n        setTodos([\n            ...todos,\n            todo,\n        ]);\n    };\n\n    const deleteTask = (task) => {\n        setTodos((prevTodos) => prevTodos.filter((todo) => todo !== task));\n    };\n\n    return (\n        <div>\n            <h1>Get Things Done!</h1>\n            <TaskForm addTask={addTask} userData={userData} />\n            {todos.map((todo, index) =>\n                <TaskList\n                    key={index}\n                    task={todo}\n                    deleteTask={deleteTask}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default TaskWrapper;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}