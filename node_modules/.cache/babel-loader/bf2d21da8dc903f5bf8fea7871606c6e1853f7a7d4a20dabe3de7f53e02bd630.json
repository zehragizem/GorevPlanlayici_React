{"ast":null,"code":"var _jsxFileName = \"/Users/gizem/Desktop/reactproje/src/components/calendar.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Calendar, Badge, message } from 'antd';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskCalendar = ({\n  apiUrl,\n  userData\n}) => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const fetchDataAndFilterTasks = async () => {\n    try {\n      const response = await axios.get(apiUrl);\n      const allData = response.data.data;\n      const filteredUsers = allData.filter(item => item.UserID === userData.UserID);\n      const tasksWithSubtasks = filteredUsers.map(user => ({\n        task: user.Task,\n        date: user.Date,\n        subtasks: user.SubTask ? user.SubTask.split(',').map(subtask => subtask.trim()) : [],\n        subdates: user.SubTaskDateRanges ? user.SubTaskDateRanges.split(',').map(subtaskdate => subtaskdate.trim()) : []\n      }));\n      setTasks(tasksWithSubtasks);\n    } catch (error) {\n      console.error('Failed to fetch data', error);\n      message.error('Veriler alınamadı. Lütfen daha sonra tekrar deneyin.');\n    }\n  };\n  useEffect(() => {\n    fetchDataAndFilterTasks();\n  }, []);\n\n  // Function to render tasks and subtasks on specific date cells in the calendar\n  const dateCellRender = value => {\n    const dateString = value.format('YYYY-MM-DD'); // Format date to match fetched data format\n    const tasksForDate = tasks.filter(task => task.date === dateString);\n    const subtasksForDate = tasksForDate.flatMap(task => task.subtasks.map((subtask, index) => ({\n      subtask,\n      subdate: task.subdates[index] // Assuming subdates correspond to subtasks by index\n    })));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"events\",\n      children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"events\",\n        children: tasksForDate.map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Badge, {\n            status: \"processing\",\n            text: task.task\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 15\n          }, this)\n        }, task.task, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"subevents\",\n        children: subtasksForDate.map(subtask => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Badge, {\n            status: \"success\",\n            text: `${subtask.subtask} - ${subtask.subdate}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }, this)\n        }, subtask.subtask, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Calendar, {\n      dateCellRender: dateCellRender\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskCalendar, \"bBd6yqkqV9dlkj9ENgRyXKaiXpk=\");\n_c = TaskCalendar;\nexport default TaskCalendar;\nvar _c;\n$RefreshReg$(_c, \"TaskCalendar\");","map":{"version":3,"names":["React","useState","useEffect","Calendar","Badge","message","axios","jsxDEV","_jsxDEV","TaskCalendar","apiUrl","userData","_s","tasks","setTasks","fetchDataAndFilterTasks","response","get","allData","data","filteredUsers","filter","item","UserID","tasksWithSubtasks","map","user","task","Task","date","Date","subtasks","SubTask","split","subtask","trim","subdates","SubTaskDateRanges","subtaskdate","error","console","dateCellRender","value","dateString","format","tasksForDate","subtasksForDate","flatMap","index","subdate","className","children","status","text","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/gizem/Desktop/reactproje/src/components/calendar.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Calendar, Badge, message } from 'antd';\nimport axios from 'axios';\n\nconst TaskCalendar = ({ apiUrl, userData }) => {\n  const [tasks, setTasks] = useState([]);\n\n  const fetchDataAndFilterTasks = async () => {\n    try {\n      const response = await axios.get(apiUrl);\n      const allData = response.data.data;\n      const filteredUsers = allData.filter(item => item.UserID === userData.UserID);\n      const tasksWithSubtasks = filteredUsers.map(user => ({\n        task: user.Task,\n        date: user.Date,\n        subtasks: user.SubTask ? user.SubTask.split(',').map(subtask => subtask.trim()) : [],\n        subdates: user.SubTaskDateRanges ? user.SubTaskDateRanges.split(',').map(subtaskdate => subtaskdate.trim()) : []\n      }));\n      setTasks(tasksWithSubtasks);\n    } catch (error) {\n      console.error('Failed to fetch data', error);\n      message.error('Veriler alınamadı. Lütfen daha sonra tekrar deneyin.');\n    }\n  };\n\n  useEffect(() => {\n    fetchDataAndFilterTasks();\n  }, []);\n\n  // Function to render tasks and subtasks on specific date cells in the calendar\n  const dateCellRender = (value) => {\n    const dateString = value.format('YYYY-MM-DD'); // Format date to match fetched data format\n    const tasksForDate = tasks.filter(task => task.date === dateString);\n    const subtasksForDate = tasksForDate.flatMap(task =>\n      task.subtasks.map((subtask, index) => ({\n        subtask,\n        subdate: task.subdates[index] // Assuming subdates correspond to subtasks by index\n      }))\n    );\n\n    return (\n      <div className=\"events\">\n        <ul className=\"events\">\n          {tasksForDate.map(task => (\n            <li key={task.task}>\n              <Badge status=\"processing\" text={task.task} />\n            </li>\n          ))}\n        </ul>\n        <ul className=\"subevents\">\n          {subtasksForDate.map(subtask => (\n            <li key={subtask.subtask}>\n              <Badge status=\"success\" text={`${subtask.subtask} - ${subtask.subdate}`} />\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  };\n\n  return (\n    <div>\n      <Calendar dateCellRender={dateCellRender} />\n    </div>\n  );\n};\n\nexport default TaskCalendar;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}