{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nconst TaskData = ({\n  userData\n}) => {\n  _s();\n  const [data, setData] = useState([]);\n  const [filteredTasks, setFilteredTasks] = useState([]);\n  const apiUrl = 'https://v1.nocodeapi.com/gizem001/google_sheets/viewGTYYvtJXMfOr?tabId=login';\n  const fetchDataAndFilterTasks = async () => {\n    try {\n      const response = await axios.get(apiUrl);\n      const allData = response.data.data;\n      setData(allData);\n      const filteredUsers = allData.filter(item => item.UserID === userData.UserID);\n      if (filteredUsers.length > 0) {\n        const tasks = filteredUsers.flatMap(user => user.Task.split(',').map(task => task.trim()));\n        setFilteredTasks(tasks);\n      } else {\n        setFilteredTasks([]);\n      }\n    } catch (error) {\n      console.error('Failed to fetch data', error);\n    }\n  };\n  useEffect(() => {\n    // İlk kez çalıştığında ve userData.UserID değiştiğinde veriyi alır\n    fetchDataAndFilterTasks();\n\n    // Her 10 saniyede bir veriyi güncellemek için setInterval kullanımı\n    const interval = setInterval(() => {\n      fetchDataAndFilterTasks();\n    }, 10000); // 10 saniyede bir yenileme yapılacak\n\n    // Component unmount olduğunda clearInterval ile interval'i temizle\n    return () => clearInterval(interval);\n  }, [userData.UserID]); // useEffect dependencies\n\n  // filteredTasks ve refetchDataAndFilter fonksiyonunu döndür\n  return {\n    filteredTasks,\n    refetchDataAndFilter: fetchDataAndFilterTasks // Bu fonksiyonu direkt olarak döndürüyoruz\n  };\n};\n_s(TaskData, \"MKS5dTKIT8dtkay3pBKuH+RzTDs=\");\n_c = TaskData;\nexport default TaskData;\nvar _c;\n$RefreshReg$(_c, \"TaskData\");","map":{"version":3,"names":["React","useState","useEffect","axios","TaskData","userData","_s","data","setData","filteredTasks","setFilteredTasks","apiUrl","fetchDataAndFilterTasks","response","get","allData","filteredUsers","filter","item","UserID","length","tasks","flatMap","user","Task","split","map","task","trim","error","console","interval","setInterval","clearInterval","refetchDataAndFilter","_c","$RefreshReg$"],"sources":["/Users/gizem/Desktop/reactproje/src/services/taskdata.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst TaskData = ({ userData }) => {\n    const [data, setData] = useState([]);\n    const [filteredTasks, setFilteredTasks] = useState([]);\n    const apiUrl = 'https://v1.nocodeapi.com/gizem001/google_sheets/viewGTYYvtJXMfOr?tabId=login';\n\n    const fetchDataAndFilterTasks = async () => {\n        try {\n            const response = await axios.get(apiUrl);\n            const allData = response.data.data;\n            setData(allData);\n\n            const filteredUsers = allData.filter(item => item.UserID === userData.UserID);\n\n            if (filteredUsers.length > 0) {\n                const tasks = filteredUsers.flatMap(user => user.Task.split(',').map(task => task.trim()));\n                setFilteredTasks(tasks);\n            } else {\n                setFilteredTasks([]);\n            }\n\n        } catch (error) {\n            console.error('Failed to fetch data', error);\n        }\n    };\n\n    useEffect(() => {\n        // İlk kez çalıştığında ve userData.UserID değiştiğinde veriyi alır\n        fetchDataAndFilterTasks();\n\n        // Her 10 saniyede bir veriyi güncellemek için setInterval kullanımı\n        const interval = setInterval(() => {\n            fetchDataAndFilterTasks();\n        }, 10000); // 10 saniyede bir yenileme yapılacak\n\n        // Component unmount olduğunda clearInterval ile interval'i temizle\n        return () => clearInterval(interval);\n    }, [userData.UserID]); // useEffect dependencies\n\n    // filteredTasks ve refetchDataAndFilter fonksiyonunu döndür\n    return {\n        filteredTasks,\n        refetchDataAndFilter: fetchDataAndFilterTasks // Bu fonksiyonu direkt olarak döndürüyoruz\n    };\n};\n\nexport default TaskData;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,QAAQ,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC/B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACQ,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAMU,MAAM,GAAG,8EAA8E;EAE7F,MAAMC,uBAAuB,GAAG,MAAAA,CAAA,KAAY;IACxC,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAACH,MAAM,CAAC;MACxC,MAAMI,OAAO,GAAGF,QAAQ,CAACN,IAAI,CAACA,IAAI;MAClCC,OAAO,CAACO,OAAO,CAAC;MAEhB,MAAMC,aAAa,GAAGD,OAAO,CAACE,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,MAAM,KAAKd,QAAQ,CAACc,MAAM,CAAC;MAE7E,IAAIH,aAAa,CAACI,MAAM,GAAG,CAAC,EAAE;QAC1B,MAAMC,KAAK,GAAGL,aAAa,CAACM,OAAO,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC1FlB,gBAAgB,CAACW,KAAK,CAAC;MAC3B,CAAC,MAAM;QACHX,gBAAgB,CAAC,EAAE,CAAC;MACxB;IAEJ,CAAC,CAAC,OAAOmB,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAChD;EACJ,CAAC;EAED3B,SAAS,CAAC,MAAM;IACZ;IACAU,uBAAuB,CAAC,CAAC;;IAEzB;IACA,MAAMmB,QAAQ,GAAGC,WAAW,CAAC,MAAM;MAC/BpB,uBAAuB,CAAC,CAAC;IAC7B,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;;IAEX;IACA,OAAO,MAAMqB,aAAa,CAACF,QAAQ,CAAC;EACxC,CAAC,EAAE,CAAC1B,QAAQ,CAACc,MAAM,CAAC,CAAC,CAAC,CAAC;;EAEvB;EACA,OAAO;IACHV,aAAa;IACbyB,oBAAoB,EAAEtB,uBAAuB,CAAC;EAClD,CAAC;AACL,CAAC;AAACN,EAAA,CA3CIF,QAAQ;AAAA+B,EAAA,GAAR/B,QAAQ;AA6Cd,eAAeA,QAAQ;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}