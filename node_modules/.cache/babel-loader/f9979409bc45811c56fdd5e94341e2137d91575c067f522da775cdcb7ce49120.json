{"ast":null,"code":"var _jsxFileName = \"/Users/gizem/Desktop/reactproje/src/common/taskEdit.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Form, Input, Button, message } from 'antd';\nimport axios from 'axios';\nimport TaskList from './tasklist';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskForm = ({\n  userData\n}) => {\n  _s();\n  const formRef = useRef(null);\n  const [name, setName] = useState('');\n  const [filteredTasks, setFilteredTasks] = useState([]);\n  const [fetchingTasks, setFetchingTasks] = useState(false); // State to manage fetching indicator\n  const [data, setData] = useState([]); // State to hold all tasks\n\n  const apiUrl = 'https://v1.nocodeapi.com/gizem004/google_sheets/rmLuKVNiJbmqpjdA?tabId=login';\n\n  // Function to fetch and filter tasks\n  const fetchDataAndFilterTasks = async () => {\n    try {\n      setFetchingTasks(true); // Set fetching indicator\n\n      const response = await axios.get(apiUrl);\n      const allData = response.data.data;\n      const filteredUsers = allData.filter(item => item.UserID === userData.UserID);\n      const tasks = filteredUsers.flatMap(user => user.Task.split(',').map(task => task.trim()));\n      setFilteredTasks(tasks);\n      setData(tasks); // Set initial data\n    } catch (error) {\n      console.error('Failed to fetch data', error);\n      message.error('Veriler alınamadı. Lütfen daha sonra tekrar deneyin.');\n    } finally {\n      setFetchingTasks(false); // Reset fetching indicator\n    }\n  };\n\n  // Fetch initial data on component mount\n  useEffect(() => {\n    fetchDataAndFilterTasks();\n  }, []);\n\n  // Handle input change\n  const handleChange = e => {\n    setName(e.target.value);\n  };\n\n  // Handle form submission\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const data = [[userData.Email, userData.Password, userData.User, name, userData.UserID]];\n    try {\n      // Post new task data\n      await axios.post(apiUrl, taskData);\n\n      // Clear form field and notify success\n      formRef.current.resetFields();\n      setName('');\n      message.success('Görev başarıyla eklendi.');\n\n      // Update state to reflect new task\n      setData(prevData => [...prevData, name]);\n    } catch (error) {\n      message.error('Görev eklenirken bir hata oluştu. Lütfen tekrar deneyin.');\n      console.error('Görev eklenirken hata oluştu:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Form, {\n      onFinish: handleSubmit,\n      ref: formRef,\n      children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"taskInput\",\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          name: \"g\\xF6rev\",\n          placeholder: \"G\\xF6rev Ekleyin\",\n          value: name,\n          onChange: handleChange,\n          size: \"large\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          htmlType: \"submit\",\n          type: \"primary\",\n          size: \"large\",\n          disabled: !name.trim() // Disable button if input is empty or only whitespace\n          ,\n          children: \"Ekle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n      data: data,\n      fetchingTasks: fetchingTasks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n};\n_s(TaskForm, \"53Z7Zh+tImBKzaQ1pynvWwTzLUE=\");\n_c = TaskForm;\nexport default TaskForm;\nvar _c;\n$RefreshReg$(_c, \"TaskForm\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Form","Input","Button","message","axios","TaskList","jsxDEV","_jsxDEV","TaskForm","userData","_s","formRef","name","setName","filteredTasks","setFilteredTasks","fetchingTasks","setFetchingTasks","data","setData","apiUrl","fetchDataAndFilterTasks","response","get","allData","filteredUsers","filter","item","UserID","tasks","flatMap","user","Task","split","map","task","trim","error","console","handleChange","e","target","value","handleSubmit","preventDefault","Email","Password","User","post","taskData","current","resetFields","success","prevData","children","onFinish","ref","Item","placeholder","onChange","size","fileName","_jsxFileName","lineNumber","columnNumber","htmlType","type","disabled","_c","$RefreshReg$"],"sources":["/Users/gizem/Desktop/reactproje/src/common/taskEdit.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { Form, Input, Button, message } from 'antd';\nimport axios from 'axios';\nimport TaskList from './tasklist';\n\nconst TaskForm = ({ userData }) => {\n    const formRef = useRef(null);\n    const [name, setName] = useState('');\n    const [filteredTasks, setFilteredTasks] = useState([]);\n    const [fetchingTasks, setFetchingTasks] = useState(false); // State to manage fetching indicator\n    const [data, setData] = useState([]); // State to hold all tasks\n\n    const apiUrl = 'https://v1.nocodeapi.com/gizem004/google_sheets/rmLuKVNiJbmqpjdA?tabId=login';\n\n    // Function to fetch and filter tasks\n    const fetchDataAndFilterTasks = async () => {\n        try {\n            setFetchingTasks(true); // Set fetching indicator\n\n            const response = await axios.get(apiUrl);\n            const allData = response.data.data;\n\n            const filteredUsers = allData.filter(item => item.UserID === userData.UserID);\n            const tasks = filteredUsers.flatMap(user => user.Task.split(',').map(task => task.trim()));\n            setFilteredTasks(tasks);\n            setData(tasks); // Set initial data\n\n        } catch (error) {\n            console.error('Failed to fetch data', error);\n            message.error('Veriler alınamadı. Lütfen daha sonra tekrar deneyin.');\n        } finally {\n            setFetchingTasks(false); // Reset fetching indicator\n        }\n    };\n\n    // Fetch initial data on component mount\n    useEffect(() => {\n        fetchDataAndFilterTasks();\n    }, []);\n\n    // Handle input change\n    const handleChange = (e) => {\n        setName(e.target.value);\n    };\n\n    // Handle form submission\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n\n        const data = [\n            [\n                userData.Email,\n                userData.Password,\n                userData.User,\n                name,\n                userData.UserID\n            ]\n        ];\n\n        try {\n            // Post new task data\n            await axios.post(apiUrl, taskData);\n\n            // Clear form field and notify success\n            formRef.current.resetFields();\n            setName('');\n            message.success('Görev başarıyla eklendi.');\n\n            // Update state to reflect new task\n            setData(prevData => [...prevData, name]);\n\n        } catch (error) {\n            message.error('Görev eklenirken bir hata oluştu. Lütfen tekrar deneyin.');\n            console.error('Görev eklenirken hata oluştu:', error);\n        }\n    };\n\n    return (\n        <div>\n            <Form onFinish={handleSubmit} ref={formRef}>\n                <Form.Item name=\"taskInput\">\n                    <Input\n                        name=\"görev\"\n                        placeholder=\"Görev Ekleyin\"\n                        value={name}\n                        onChange={handleChange}\n                        size=\"large\"\n                    />\n                </Form.Item>\n                <Form.Item>\n                    <Button\n                        htmlType=\"submit\"\n                        type=\"primary\"\n                        size=\"large\"\n                        disabled={!name.trim()} // Disable button if input is empty or only whitespace\n                    >\n                        Ekle\n                    </Button>\n                </Form.Item>\n            </Form>\n            <TaskList data={data} fetchingTasks={fetchingTasks} />\n        </div>\n    );\n};\n\nexport default TaskForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}