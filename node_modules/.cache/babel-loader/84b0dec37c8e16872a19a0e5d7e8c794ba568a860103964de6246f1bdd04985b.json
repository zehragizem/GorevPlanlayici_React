{"ast":null,"code":"var _jsxFileName = \"/Users/gizem/Desktop/reactproje/src/common/taskEdit.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useReducer } from 'react';\nimport { Form, Input, Button, message } from 'antd';\nimport axios from 'axios';\nimport TaskList from './tasklist';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  name: '',\n  filteredTasks: [],\n  fetchingTasks: false,\n  refreshKey: 0\n};\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_NAME':\n      return {\n        ...state,\n        name: action.payload\n      };\n    case 'SET_FILTERED_TASKS':\n      return {\n        ...state,\n        filteredTasks: action.payload\n      };\n    case 'SET_FETCHING_TASKS':\n      return {\n        ...state,\n        fetchingTasks: action.payload\n      };\n    case 'INCREMENT_REFRESH_KEY':\n      return {\n        ...state,\n        refreshKey: state.refreshKey + 1\n      };\n    default:\n      return state;\n  }\n};\nconst TaskForm = ({\n  userData\n}) => {\n  _s();\n  const formRef = useRef(null);\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const apiUrl = 'https://v1.nocodeapi.com/gizem004/google_sheets/rmLuKVNiJbmqpjdA?tabId=login';\n\n  // Function to fetch and filter tasks\n  const fetchDataAndFilterTasks = async () => {\n    try {\n      dispatch({\n        type: 'SET_FETCHING_TASKS',\n        payload: true\n      }); // Set fetching indicator\n\n      const response = await axios.get(apiUrl);\n      const allData = response.data.data;\n      const filteredUsers = allData.filter(item => item.UserID === userData.UserID);\n      const tasks = filteredUsers.flatMap(user => user.Task.split(',').map(task => task.trim()));\n      dispatch({\n        type: 'SET_FILTERED_TASKS',\n        payload: tasks\n      });\n    } catch (error) {\n      console.error('Failed to fetch data', error);\n      message.error('Veriler alınamadı. Lütfen daha sonra tekrar deneyin.');\n    } finally {\n      dispatch({\n        type: 'SET_FETCHING_TASKS',\n        payload: false\n      }); // Reset fetching indicator\n    }\n  };\n\n  // Fetch initial data on component mount\n  useEffect(() => {\n    fetchDataAndFilterTasks();\n  }, []);\n\n  // Handle input change\n  const handleChange = e => {\n    dispatch({\n      type: 'SET_NAME',\n      payload: e.target.value\n    });\n  };\n\n  // Handle form submission\n  const handleSubmit = async () => {\n    const data = [[userData.Email, userData.Password, userData.User, state.name, userData.UserID]];\n    try {\n      // Post new task data\n      await axios.post(apiUrl, data);\n\n      // Clear form fields and notify success\n      formRef.current.resetFields();\n      dispatch({\n        type: 'SET_NAME',\n        payload: ''\n      });\n      message.success('Görev başarıyla eklendi.');\n\n      // Increment refreshKey to force TaskList refresh\n      dispatch({\n        type: 'INCREMENT_REFRESH_KEY'\n      });\n\n      // Refetch tasks to update list\n      fetchDataAndFilterTasks();\n    } catch (error) {\n      message.error('Görev eklenirken bir hata oluştu. Lütfen tekrar deneyin.');\n      console.error('Görev eklenirken hata oluştu:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Form, {\n      onFinish: handleSubmit,\n      ref: formRef,\n      children: [/*#__PURE__*/_jsxDEV(Form.Item, {\n        name: \"taskInput\",\n        children: /*#__PURE__*/_jsxDEV(Input, {\n          name: \"g\\xF6rev\",\n          placeholder: \"G\\xF6rev Ekleyin\",\n          value: state.name,\n          onChange: handleChange,\n          size: \"large\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Item, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          htmlType: \"submit\",\n          type: \"primary\",\n          size: \"large\",\n          disabled: !state.name.trim() // Disable button if input is empty or only whitespace\n          ,\n          children: \"Ekle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TaskList, {\n      filteredTasks: state.filteredTasks,\n      fetchingTasks: state.fetchingTasks\n    }, state.refreshKey, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n};\n_s(TaskForm, \"KwbhIh/RaFFs901a84g0ije1IpI=\");\n_c = TaskForm;\nexport default TaskForm;\nvar _c;\n$RefreshReg$(_c, \"TaskForm\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useReducer","Form","Input","Button","message","axios","TaskList","jsxDEV","_jsxDEV","initialState","name","filteredTasks","fetchingTasks","refreshKey","reducer","state","action","type","payload","TaskForm","userData","_s","formRef","dispatch","apiUrl","fetchDataAndFilterTasks","response","get","allData","data","filteredUsers","filter","item","UserID","tasks","flatMap","user","Task","split","map","task","trim","error","console","handleChange","e","target","value","handleSubmit","Email","Password","User","post","current","resetFields","success","children","onFinish","ref","Item","placeholder","onChange","size","fileName","_jsxFileName","lineNumber","columnNumber","htmlType","disabled","_c","$RefreshReg$"],"sources":["/Users/gizem/Desktop/reactproje/src/common/taskEdit.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useReducer } from 'react';\nimport { Form, Input, Button, message } from 'antd';\nimport axios from 'axios';\nimport TaskList from './tasklist';\n\nconst initialState = {\n    name: '',\n    filteredTasks: [],\n    fetchingTasks: false,\n    refreshKey: 0\n};\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case 'SET_NAME':\n            return { ...state, name: action.payload };\n        case 'SET_FILTERED_TASKS':\n            return { ...state, filteredTasks: action.payload };\n        case 'SET_FETCHING_TASKS':\n            return { ...state, fetchingTasks: action.payload };\n        case 'INCREMENT_REFRESH_KEY':\n            return { ...state, refreshKey: state.refreshKey + 1 };\n        default:\n            return state;\n    }\n};\n\nconst TaskForm = ({ userData }) => {\n    const formRef = useRef(null);\n    const [state, dispatch] = useReducer(reducer, initialState);\n    const apiUrl = 'https://v1.nocodeapi.com/gizem004/google_sheets/rmLuKVNiJbmqpjdA?tabId=login';\n\n    // Function to fetch and filter tasks\n    const fetchDataAndFilterTasks = async () => {\n        try {\n            dispatch({ type: 'SET_FETCHING_TASKS', payload: true }); // Set fetching indicator\n\n            const response = await axios.get(apiUrl);\n            const allData = response.data.data;\n\n            const filteredUsers = allData.filter(item => item.UserID === userData.UserID);\n            const tasks = filteredUsers.flatMap(user => user.Task.split(',').map(task => task.trim()));\n            dispatch({ type: 'SET_FILTERED_TASKS', payload: tasks });\n        } catch (error) {\n            console.error('Failed to fetch data', error);\n            message.error('Veriler alınamadı. Lütfen daha sonra tekrar deneyin.');\n        } finally {\n            dispatch({ type: 'SET_FETCHING_TASKS', payload: false }); // Reset fetching indicator\n        }\n    };\n\n    // Fetch initial data on component mount\n    useEffect(() => {\n        fetchDataAndFilterTasks();\n    }, []);\n\n    // Handle input change\n    const handleChange = (e) => {\n        dispatch({ type: 'SET_NAME', payload: e.target.value });\n    };\n\n    // Handle form submission\n    const handleSubmit = async () => {\n        const data = [\n            [\n                userData.Email,\n                userData.Password,\n                userData.User,\n                state.name,\n                userData.UserID\n            ]\n        ];\n\n        try {\n            // Post new task data\n            await axios.post(apiUrl, data);\n\n            // Clear form fields and notify success\n            formRef.current.resetFields();\n            dispatch({ type: 'SET_NAME', payload: '' });\n            message.success('Görev başarıyla eklendi.');\n\n            // Increment refreshKey to force TaskList refresh\n            dispatch({ type: 'INCREMENT_REFRESH_KEY' });\n\n            // Refetch tasks to update list\n            fetchDataAndFilterTasks();\n        } catch (error) {\n            message.error('Görev eklenirken bir hata oluştu. Lütfen tekrar deneyin.');\n            console.error('Görev eklenirken hata oluştu:', error);\n        }\n    };\n\n    return (\n        <div>\n            <Form onFinish={handleSubmit} ref={formRef}>\n                <Form.Item name=\"taskInput\">\n                    <Input\n                        name=\"görev\"\n                        placeholder=\"Görev Ekleyin\"\n                        value={state.name}\n                        onChange={handleChange}\n                        size=\"large\"\n                    />\n                </Form.Item>\n                <Form.Item>\n                    <Button\n                        htmlType=\"submit\"\n                        type=\"primary\"\n                        size=\"large\"\n                        disabled={!state.name.trim()} // Disable button if input is empty or only whitespace\n                    >\n                        Ekle\n                    </Button>\n                </Form.Item>\n            </Form>\n            <TaskList key={state.refreshKey} filteredTasks={state.filteredTasks} fetchingTasks={state.fetchingTasks} />\n        </div>\n    );\n};\n\nexport default TaskForm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}