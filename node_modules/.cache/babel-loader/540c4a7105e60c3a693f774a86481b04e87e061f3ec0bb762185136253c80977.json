{"ast":null,"code":"var _jsxFileName = \"/Users/gizem/Desktop/reactproje/src/components/calendar.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Badge, Calendar, message } from 'antd';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst colors = ['pink', 'red', 'yellow', 'orange', 'cyan', 'green', 'blue', 'purple', 'geekblue', 'magenta', 'volcano', 'gold', 'lime'];\nconst TaskCalendar = ({\n  apiUrl,\n  userData\n}) => {\n  _s();\n  const [todos, setTodos] = useState([]);\n  useEffect(() => {\n    const fetchDataAndFilterTasks = async () => {\n      try {\n        const response = await axios.get(apiUrl);\n        const allData = response.data.data;\n        console.log('All data:', allData);\n\n        // Filter tasks based on UserID and transform tasks into a usable format\n        const filteredUsers = allData.filter(item => item.UserID === userData.UserID);\n        const tasksWithDates = filteredUsers.map(user => ({\n          task: user.Task,\n          date: user.Date // assuming 'Date' is in a format that can be parsed by moment or date-fns\n        }));\n        setTodos(tasksWithDates);\n      } catch (error) {\n        console.error('Failed to fetch data:', error);\n        message.error(`Data fetching failed. Please try again later. Error: ${error.message}`);\n      }\n    };\n    fetchDataAndFilterTasks();\n  }, [apiUrl, userData.UserID]);\n\n  // Function to render tasks on the calendar date cell\n  const renderTasksOnCalendar = value => {\n    const tasksForDate = todos.filter(task => task.date.isSame(value, 'day'));\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: tasksForDate.map((task, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(Badge, {\n          color: colors[index % colors.length],\n          text: task.task\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Calendar, {\n      dateCellRender: renderTasksOnCalendar\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskCalendar, \"4w2FR3x+JAhc2MKl4V8naiLXs70=\");\n_c = TaskCalendar;\nexport default TaskCalendar;\nvar _c;\n$RefreshReg$(_c, \"TaskCalendar\");","map":{"version":3,"names":["React","useEffect","useState","Badge","Calendar","message","axios","jsxDEV","_jsxDEV","colors","TaskCalendar","apiUrl","userData","_s","todos","setTodos","fetchDataAndFilterTasks","response","get","allData","data","console","log","filteredUsers","filter","item","UserID","tasksWithDates","map","user","task","Task","date","Date","error","renderTasksOnCalendar","value","tasksForDate","isSame","children","index","color","length","text","fileName","_jsxFileName","lineNumber","columnNumber","dateCellRender","_c","$RefreshReg$"],"sources":["/Users/gizem/Desktop/reactproje/src/components/calendar.js"],"sourcesContent":["\nimport React, { useEffect, useState } from 'react';\nimport { Badge, Calendar, message } from 'antd';\nimport axios from 'axios';\n\nconst colors = [\n  'pink', 'red', 'yellow', 'orange', 'cyan', 'green', 'blue', 'purple', 'geekblue', 'magenta', 'volcano', 'gold', 'lime',\n];\n\nconst TaskCalendar = ({ apiUrl, userData }) => {\n  const [todos, setTodos] = useState([]);\n\n  useEffect(() => {\n    const fetchDataAndFilterTasks = async () => {\n      try {\n        const response = await axios.get(apiUrl);\n        const allData = response.data.data;\n\n        console.log('All data:', allData);\n\n        // Filter tasks based on UserID and transform tasks into a usable format\n        const filteredUsers = allData.filter(item => item.UserID === userData.UserID);\n        const tasksWithDates = filteredUsers.map(user => ({\n          task: user.Task,\n          date: user.Date // assuming 'Date' is in a format that can be parsed by moment or date-fns\n        }));\n\n        setTodos(tasksWithDates);\n\n      } catch (error) {\n        console.error('Failed to fetch data:', error);\n        message.error(`Data fetching failed. Please try again later. Error: ${error.message}`);\n      }\n    };\n\n    fetchDataAndFilterTasks();\n  }, [apiUrl, userData.UserID]);\n\n  // Function to render tasks on the calendar date cell\n  const renderTasksOnCalendar = (value) => {\n    const tasksForDate = todos.filter(task => task.date.isSame(value, 'day'));\n\n    return (\n      <ul>\n        {tasksForDate.map((task, index) => (\n          <li key={index}>\n            <Badge color={colors[index % colors.length]} text={task.task} />\n          </li>\n        ))}\n      </ul>\n    );\n  };\n\n  return (\n    <div>\n      <Calendar\n        dateCellRender={renderTasksOnCalendar}\n      />\n    </div>\n  );\n};\n\nexport default TaskCalendar;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}