{"ast":null,"code":"var _jsxFileName = \"/Users/gizem/Desktop/reactproje/src/components/calendar.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Badge, Calendar, message, Space } from 'antd';\nimport axios from 'axios';\nimport 'antd/dist/antd.css'; // Ensure you import Ant Design CSS for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst colors = ['pink', 'red', 'yellow', 'orange', 'cyan', 'green', 'blue', 'purple', 'geekblue', 'magenta', 'volcano', 'gold', 'lime'];\nconst TaskCalendar = ({\n  apiUrl,\n  userData\n}) => {\n  _s();\n  const [todos, setTodos] = useState([]);\n  const fetchDataAndFilterTasks = async () => {\n    try {\n      const response = await axios.get(apiUrl);\n      const allData = response.data.data;\n\n      // Filter tasks based on UserID and transform tasks into a usable format\n      const filteredUsers = allData.filter(item => item.UserID === userData.UserID);\n      const tasks = filteredUsers.flatMap(user => user.Task.split(',').map(task => {\n        const [date, ...taskDetails] = task.trim().split(':');\n        return {\n          date: date.trim(),\n          task: taskDetails.join(':').trim()\n        };\n      }));\n      setTodos(tasks); // Set initial data\n    } catch (error) {\n      console.error('Failed to fetch data:', error);\n      message.error(`Veriler alınamadı. Lütfen daha sonra tekrar deneyin. Hata: ${error.message}`);\n    }\n  };\n  useEffect(() => {\n    fetchDataAndFilterTasks();\n  }, [apiUrl, userData]);\n  const getListData = value => {\n    const date = value.format('YYYY-MM-DD');\n    return todos.filter(todo => todo.date === date);\n  };\n  const dateCellRender = value => {\n    const listData = getListData(value);\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"events\",\n      children: listData.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(Space, {\n          direction: \"vertical\",\n          children: /*#__PURE__*/_jsxDEV(Badge, {\n            color: colors[index % colors.length],\n            text: item.task\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(Calendar, {\n    dateCellRender: dateCellRender\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskCalendar, \"4w2FR3x+JAhc2MKl4V8naiLXs70=\");\n_c = TaskCalendar;\nexport default TaskCalendar;\nvar _c;\n$RefreshReg$(_c, \"TaskCalendar\");","map":{"version":3,"names":["React","useEffect","useState","Badge","Calendar","message","Space","axios","jsxDEV","_jsxDEV","colors","TaskCalendar","apiUrl","userData","_s","todos","setTodos","fetchDataAndFilterTasks","response","get","allData","data","filteredUsers","filter","item","UserID","tasks","flatMap","user","Task","split","map","task","date","taskDetails","trim","join","error","console","getListData","value","format","todo","dateCellRender","listData","className","children","index","direction","color","length","text","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/gizem/Desktop/reactproje/src/components/calendar.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Badge, Calendar, message, Space } from 'antd';\nimport axios from 'axios';\nimport 'antd/dist/antd.css'; // Ensure you import Ant Design CSS for styling\n\nconst colors = [\n  'pink', 'red', 'yellow', 'orange', 'cyan', 'green', 'blue', 'purple', 'geekblue', 'magenta', 'volcano', 'gold', 'lime',\n];\n\nconst TaskCalendar = ({ apiUrl, userData }) => {\n  const [todos, setTodos] = useState([]);\n\n  const fetchDataAndFilterTasks = async () => {\n    try {\n      const response = await axios.get(apiUrl);\n      const allData = response.data.data;\n\n      // Filter tasks based on UserID and transform tasks into a usable format\n      const filteredUsers = allData.filter(item => item.UserID === userData.UserID);\n      const tasks = filteredUsers.flatMap(user =>\n        user.Task.split(',').map(task => {\n          const [date, ...taskDetails] = task.trim().split(':');\n          return { date: date.trim(), task: taskDetails.join(':').trim() };\n        })\n      );\n\n      setTodos(tasks); // Set initial data\n\n    } catch (error) {\n      console.error('Failed to fetch data:', error);\n      message.error(`Veriler alınamadı. Lütfen daha sonra tekrar deneyin. Hata: ${error.message}`);\n    }\n  };\n\n  useEffect(() => {\n    fetchDataAndFilterTasks();\n  }, [apiUrl, userData]);\n\n  const getListData = (value) => {\n    const date = value.format('YYYY-MM-DD');\n    return todos.filter(todo => todo.date === date);\n  };\n\n  const dateCellRender = (value) => {\n    const listData = getListData(value);\n    return (\n      <ul className=\"events\">\n        {listData.map((item, index) => (\n          <li key={index}>\n            <Space direction=\"vertical\">\n              <Badge color={colors[index % colors.length]} text={item.task} />\n            </Space>\n          </li>\n        ))}\n      </ul>\n    );\n  };\n\n  return (\n    <Calendar dateCellRender={dateCellRender} />\n  );\n};\n\nexport default TaskCalendar;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}